generator client {
  provider      = "prisma-client-js"
  output        = "./generated/"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum APIKeyType {
  Invalid
  Valid
}

model Credential {
  id   String     @id @default(cuid())
  type APIKeyType
  key  String     @unique

  @@map("credentials")
}

model User {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  steamid    BigInt    @unique(map: "steamid")
  name       String?   @db.VarChar(32)
  ip         Int?
  lastlogin  Int       @default(-1)
  points     Float     @default(0)
  playtime   Float     @default(0)
  created_at DateTime? @default(now()) @db.Timestamp(3)
  updated_at DateTime? @default(now()) @db.Timestamp(3)

  playertimes   Playertimes[]
  chats         Chat[]
  Stagetimes    Stagetimes[]
  StylePlaytime StylePlaytime[]

  @@index([points])
  @@index([lastlogin])
  @@map("users")
}

model Mapzones {
  id            Int       @id @default(autoincrement())
  map           String    @db.VarChar(128)
  type          Int
  corner1_x     Float
  corner1_y     Float
  corner1_z     Float
  corner2_x     Float
  corner2_y     Float
  corner2_z     Float
  destination_x Float     @default(0)
  destination_y Float     @default(0)
  destination_z Float     @default(0)
  track         Int       @default(0)
  flags         Int       @default(0)
  data          Int       @default(0)
  hammerid      Int       @default(-1)
  hookname      String    @default("NONE") @db.VarChar(128)
  limitspeed    Float     @default(350.0)
  created_at    DateTime? @default(now()) @db.Timestamp(3)
  updated_at    DateTime? @default(now()) @db.Timestamp(3)

  @@map("mapzones")
}

model Playertimes {
  id          Int       @id @default(autoincrement())
  steamid     BigInt    @map("steamid")
  map         String    @db.VarChar(128)
  time        Float
  jumps       Int?
  style       Int?
  strafes     Int?
  sync        Float?
  points      Float     @default(0)
  track       Int       @default(0)
  completions Int?      @default(1) @db.SmallInt
  prestrafe   Float?    @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(3)
  updated_at  DateTime? @default(now()) @db.Timestamp(3)

  user User @relation(fields: [steamid], references: [steamid], onUpdate: Cascade, onDelete: Cascade)

  @@index([map, style, track, time])
  @@index([steamid, points])
  @@index([time])
  @@map("playertimes")
}

model Chat {
  steamid    BigInt    @id @map("steamid")
  name       Int       @default(0)
  ccname     String?   @db.VarChar(128)
  message    Int       @default(0)
  ccmessage  String?   @db.VarChar(16)
  ccaccess   Int       @default(0)
  created_at DateTime? @default(now()) @db.Timestamp(3)
  updated_at DateTime? @default(now()) @db.Timestamp(3)

  user User @relation(fields: [steamid], references: [steamid], onUpdate: Cascade, onDelete: Cascade)

  @@map("chat")
}

model Maptiers {
  map           String    @id @db.VarChar(128)
  tier          Int       @default(0)
  limitPrespeed Boolean   @default(true)
  maxvelocity   Float     @default(0)
  created_at    DateTime? @default(now()) @db.Timestamp(3)
  updated_at    DateTime? @default(now()) @db.Timestamp(3)

  @@map("maptiers")
}

model Stagetimes {
  id          Int       @id @default(autoincrement())
  steamid     BigInt
  map         String    @db.VarChar(128)
  time        Float
  style       Int
  stage       Int
  postspeed   Float?
  completions Int?
  created_at  DateTime? @default(now()) @db.Timestamp(3)
  updated_at  DateTime? @default(now()) @db.Timestamp(3)

  user User @relation(fields: [steamid], references: [steamid], onUpdate: Cascade, onDelete: Cascade)

  @@map("stagetimes")
}

model CPtimes {
  id         Int       @id @default(autoincrement())
  steamid    BigInt
  map        String    @db.VarChar(128)
  time       Float
  marktime   Float?
  style      Int
  cp         Int
  attemps    Int?
  prespeed   Float?
  postspeed  Float?
  created_at DateTime? @default(now()) @db.Timestamp(3)
  updated_at DateTime? @default(now()) @db.Timestamp(3)

  @@map("cptimes")
}

model StylePlaytime {
  steamid    BigInt    @id
  style      Int
  playtime   Float
  created_at DateTime? @default(now()) @db.Timestamp(3)
  updated_at DateTime? @default(now()) @db.Timestamp(3)

  user User @relation(fields: [steamid], references: [steamid], onUpdate: Cascade, onDelete: Cascade)

  @@map("styleplaytime")
}
